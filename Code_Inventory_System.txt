#include <iostream>
#include <string>
#include <cstdlib>

using namespace std;

// Define a structure for the components of the unit
struct Component {
    string name;      // Component name (e.g., "Mouse", "Keyboard", etc.)
    int quantity;     // Quantity of the component (always 1 in this case)
    string status;    // Status (e.g., "Good" or "Bad")
};

class Unit {
public:
    // Properties of the unit, each unit contains 5 components
    Component components[5]; // Array of 5 components per unit
    
    // Constructor to initialize the unit's components
    Unit() {
        // Initializing each component for the unit with name, quantity 1, and status
        components[0] = {"Mouse", 1, "Good"};
        components[1] = {"Keyboard", 1, "Bad"};
        components[2] = {"AVR", 1, "Good"};
        components[3] = {"HDMI", 1, "Good"};
        components[4] = {"System Unit", 1, "Bad"};
    }

    // Method to display the details of the components in the unit
    void displayUnitDetails() {
        cout << "Unit components:\n";
        for (int i = 0; i < 5; ++i) {
            cout << "Component Name: " << components[i].name << endl;
            cout << "Quantity: " << components[i].quantity << endl;
            cout << "Status: " << components[i].status << endl;
            cout << "-----------------------------\n";
        }
    }

    // Method to search for and display the components of this unit
    void searchAndDisplay() {
        displayUnitDetails();
    }

    // Edit component details
    void editComponent(int componentIndex, const string& newName, int newQuantity, const string& newStatus) {
        components[componentIndex].name = newName;
        components[componentIndex].quantity = newQuantity;
        components[componentIndex].status = newStatus;
        cout << "Component " << components[componentIndex].name << " has been updated.\n";
    }

    // Delete a component (just clear the data in this example)
    void deleteComponent(int componentIndex) {
        components[componentIndex].name = "Deleted";
        components[componentIndex].quantity = 0;
        components[componentIndex].status = "Deleted";
        cout << "Component " << componentIndex + 1 << " has been deleted.\n";
    }
};

// Function to display the component grid
void displayComponentGrid() {
    cout << "  ________________________________________________________ \n";
    cout << " |  ____________________________________________________  |\n";
    cout << " |:|                 INVENTORY SYSTEM                   |:|\n";
    cout << " |:|----------------------------------------------------|:|\n";
    cout << " |:|   C1   |    C2    |    C3    |    C4    |    C5    |:|\n";
    cout << " |:|----------------------------------------------------|:|\n";
    cout << " |:|   C6   |    C7    |    C8    |    C9    |    C10   |:|\n";
    cout << " |:|----------------------------------------------------|:|\n";
    cout << " |:|   C11  |    C12   |    C13   |    C14   |    C15   |:|\n";
    cout << " |:|----------------------------------------------------|:|\n";
    cout << " |:|   C16  |    C17   |    C18   |    C19   |    C20   |:|\n";
    cout << " |:|________|__________|__________|__________|__________|:|\n";
    cout << " |________________________________________________________|\n";
}

// Function to display the menu options
void displayMenu() {
    cout << "      +------------+       +--------------------------+ \n";
    cout << "      | [1] Search |       | [2] Display all Units    | \n";
    cout << "      +------------+       +--------------------------+ \n";
    cout << "      | [3] Exit   |       | [4] Edit Unit Components | \n";
    cout << "      +------------+       +--------------------------+ \n";
    cout << "                           | [5] Delete Component     | \n";
    cout << "                           +--------------------------+ \n";
}

// Main function with menu interaction
int main() {
    int choice, unitChoice, componentChoice;
    string newName, newStatus;
    int newQuantity;

    // Create an array of 20 units (C1 to C20)
    Unit units[20];

    while (true) {
    	system("cls");
        // Display grid and menu
        displayComponentGrid();
        displayMenu();

        // Ask for user input to select an option
        cout << "\nPlease select an option (1, 2, 3, 4, or 5): ";
        cin >> choice;

        // Handle user's choice
        switch (choice) {
            case 1:
            	system("cls");
            	cout << "  _________________________ \n";
    			cout << " |  _____________________  |\n";
                cout << " |:| SEARCH ____________ |:|\n";
                cout << " |:|_____________________|:|\n";
    			cout << " |_________________________|\n\n";
                cout << "Enter the unit number (1 to 20): ";
                cin >> unitChoice;

                // Check if the input is within the valid range
                if (unitChoice >= 1 && unitChoice <= 20) {
                    // Call search function for the selected unit
                    cout << "Displaying details for Unit C" << unitChoice << ":\n";
                    units[unitChoice - 1].searchAndDisplay(); // -1 for 0-indexed array
                } else {
                    cout << "Invalid unit number. Please enter a number between 1 and 20.\n";
                }
                cout << "\nPress any key to return to the main page...";
    			cin.ignore();  // To clear the buffer
    			cin.get();  // Wait for the user to press any key
                break;

            case 2:
            	system("cls");
            	cout << "  _________________________ \n";
    			cout << " |  _____________________  |\n";
                cout << " |:|  DISPLAY ALL UNITS  |:|\n";
                cout << " |:|_____________________|:|\n";
    			cout << " |_________________________|\n\n";
                // Show details for all 20 units
                for (int i = 0; i < 20; ++i) {
                    cout << "Unit C" << (i + 1) << " details:\n";
                    units[i].searchAndDisplay();
                    cout << "==============================\n";
                }
                cout << "\nPress any key to return to the main page...";
    			cin.ignore();  // To clear the buffer
    			cin.get();  // Wait for the user to press any key
                break;

            case 3:
            	system("cls");
            	cout << "  _________________________ \n";
    			cout << " |  _____________________  |\n";
                cout << " |:|         EXIT        |:|\n";
                cout << " |:|_____________________|:|\n";
    			cout << " |_________________________|\n\n";
                cout << "Exiting the program.\n";
                return 0;

            case 4:
            	system("cls");
            	cout << "  __________________________ \n";
    			cout << " |  ______________________  |\n";
                cout << " |:| EDIT UNIT COMPONENTS |:|\n";
                cout << " |:|______________________|:|\n";
    			cout << " |__________________________|\n\n";
                cout << "Enter the unit number (1 to 20): ";
                cin >> unitChoice;

                if (unitChoice >= 1 && unitChoice <= 20) {
                    cout << "Enter component number (1 to 5): ";
                    cin >> componentChoice;

                    if (componentChoice >= 1 && componentChoice <= 5) {
                        cout << "Enter new name: ";
                        cin >> newName;
                        cout << "Enter new quantity: ";
                        cin >> newQuantity;
                        cout << "Enter new status (Good or Bad): ";
                        cin >> newStatus;

                        units[unitChoice - 1].editComponent(componentChoice - 1, newName, newQuantity, newStatus);
                    } else {
                        cout << "Invalid component number. Please enter a number between 1 and 5.\n";
                    }
                } else {
                    cout << "Invalid unit number. Please enter a number between 1 and 20.\n";
                }
                cout << "\nPress any key to return to the main page...";
    			cin.ignore();  // To clear the buffer
    			cin.get();  // Wait for the user to press any key
                break;

            case 5:
            	system("cls");
            	cout << "  _________________________ \n";
    			cout << " |  _____________________  |\n";
                cout << " |:|   DELETE COMPONENT  |:|\n";
                cout << " |:|_____________________|:|\n";
    			cout << " |_________________________|\n\n";
                cout << "Enter the unit number (1 to 20): ";
                cin >> unitChoice;

                if (unitChoice >= 1 && unitChoice <= 20) {
                    cout << "Enter component number (1 to 5) to delete: ";
                    cin >> componentChoice;

                    if (componentChoice >= 1 && componentChoice <= 5) {
                        units[unitChoice - 1].deleteComponent(componentChoice - 1);
                    } else {
                        cout << "Invalid component number. Please enter a number between 1 and 5.\n";
                    }
                } else {
                    cout << "Invalid unit number. Please enter a number between 1 and 20.\n";
                }
                cout << "\nPress any key to return to the main page...";
    			cin.ignore();  // To clear the buffer
    			cin.get();  // Wait for the user to press any key
                break;

            default:
                cout << "\nInvalid selection. Please choose a valid option (1-5).\n";
                break;
        }
    }

    return 0;
}
